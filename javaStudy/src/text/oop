OOP(OBJECT ORIENTED PROGRAMMING) 객체지향 프로그래밍
객체 자선의 속성을 가지고 있고 다른 것과 식별 가능한 것을 말한다.
객체는 속성(필드,변수)과 동작(메소드,함수)으로 구성되어있다.

현실 세계의 객체를 소프트웨어 객체로 구현하는 것을 객체 모델링(OBJECT MODELING)이라한다
객체 모델링(OBJECT MODELING) -> 현실 세계 객체의 속성과 동작을 추려내어 소프트웨어 객체의 필드와 메소드로 정의하는 과정

객체들은 각각 독립적으로 존재하며, 다른 객체와 서로 상호작용하면서 동작한다.
객체들 사이의 상호작용 수단은 메소드이다.

객체가 다른 객체의 기능을 이용하는 것이 메소드 호출 

객체 간의 관계
관계의 종류
집합 관계 : 객체중 하나는 부품이고 하나는 완성품에 해당한다. ex) 자동차는 엔진, 타이어 ,핸들 등으로 구성되므로 자동차와 부품들은 집합의 관계라고 할 수 있다.
사용 관계 : 객체 간의 상호작용을 말한다. ex) 사람은 자동차를 사용하므로 사람과 자동차는 사용의 관계라고 할 수 있다.
상속 관계 : 상퓌객체를 기반으로 하위 객체를 생성하는 관계 ex) 자동차(하위)는 기계(상위)의 종류이다.

객체 지향 프로그래밍이란 만들고자 하는 완성품인 객체를 모델링하고 집합 관계에 있는 부품객체와 사용 관계에 있는 객체를 하나씩 설계한 후 조립하는 방싯으로 프로그램을 개발하는 기법이다

객체 지향 프로그래밍의 특징
캡슐화 : 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것을 말한다. -> 외부에서 내부의 코드 이용이 불가능하다. 객체가 노출해서 제공하는 피드와 메소드만을 이용할수 있다
상속 : 부모가 가지고 있는 재산을 자식에게 물려주는것. 상위 객체는 자신이 가지고 있는 필드, 메소드를 하위 객체에 물려주어 하위 객체가 사용할 수 있도록 한다.
다형성 : 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질을 말한다. 다형성은 하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 한다.
	      자바는 다형성을 위해 부모 클래스 또는 인터페이스의 타입 변환을 허용한다. 부모 타입에는 모든 자식 객체가 대입될 수 있고, 인터페이스 타입에는 모든 구현 객체가 대입될 수 있다.
	      
	      
객체는 설계도를 바탕으로 만들어진다.
자바에서는 설계도가 클래스(class)이다. 
클래스에서는 객체를 생성하기 위한 필드와 메소드가 정의되어 있다.
클로스로 부터 만들어진 객체를 해당 클래스의 인스턴스라고한다.
자동차 객체는ㅁ 자동차 클래스의 인스턴스인 셈이다. 클래스로부터 객체를 만드는 과정을 인스턴스화라고 한다.





